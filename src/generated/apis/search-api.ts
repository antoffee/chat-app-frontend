// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * Chat App Backend - SWAGGER
 * chat app backend
 *
 * OpenAPI spec version: 1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { ApiChatMessageEntitySearchItemResponse } from '../models';
import { ApiChatRoomEntitySearchItemResponse } from '../models';
import { ApiUserEntitySearchItemResponse } from '../models';
import { SearchMessagesParamsDto } from '../models';
import { SearchParamsDto } from '../models';
/**
 * SearchApi - axios parameter creator
 * @export
 */
export const SearchApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @param {SearchParamsDto} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchControllerSearchChats: async (
            body: SearchParamsDto,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError(
                    'body',
                    'Required parameter body was null or undefined when calling searchControllerSearchChats.',
                );
            }
            const localVarPath = `/search/chats`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            const needsSerialization =
                typeof body !== 'string' || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || '';

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {SearchMessagesParamsDto} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchControllerSearchMessages: async (
            body: SearchMessagesParamsDto,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError(
                    'body',
                    'Required parameter body was null or undefined when calling searchControllerSearchMessages.',
                );
            }
            const localVarPath = `/search/messages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            const needsSerialization =
                typeof body !== 'string' || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || '';

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {SearchParamsDto} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchControllerSearchUsers: async (
            body: SearchParamsDto,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError(
                    'body',
                    'Required parameter body was null or undefined when calling searchControllerSearchUsers.',
                );
            }
            const localVarPath = `/search/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            const needsSerialization =
                typeof body !== 'string' || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || '';

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    };
};

/**
 * SearchApi - functional programming interface
 * @export
 */
export const SearchApiFp = function (configuration?: Configuration) {
    return {
        /**
         *
         * @param {SearchParamsDto} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchControllerSearchChats(
            body: SearchParamsDto,
            options?: AxiosRequestConfig,
        ): Promise<
            (
                axios?: AxiosInstance,
                basePath?: string,
            ) => Promise<AxiosResponse<Array<ApiChatRoomEntitySearchItemResponse>>>
        > {
            const localVarAxiosArgs = await SearchApiAxiosParamCreator(configuration).searchControllerSearchChats(
                body,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs: AxiosRequestConfig = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {SearchMessagesParamsDto} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchControllerSearchMessages(
            body: SearchMessagesParamsDto,
            options?: AxiosRequestConfig,
        ): Promise<
            (
                axios?: AxiosInstance,
                basePath?: string,
            ) => Promise<AxiosResponse<Array<ApiChatMessageEntitySearchItemResponse>>>
        > {
            const localVarAxiosArgs = await SearchApiAxiosParamCreator(configuration).searchControllerSearchMessages(
                body,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs: AxiosRequestConfig = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {SearchParamsDto} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchControllerSearchUsers(
            body: SearchParamsDto,
            options?: AxiosRequestConfig,
        ): Promise<
            (axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<ApiUserEntitySearchItemResponse>>>
        > {
            const localVarAxiosArgs = await SearchApiAxiosParamCreator(configuration).searchControllerSearchUsers(
                body,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs: AxiosRequestConfig = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
    };
};

/**
 * SearchApi - factory interface
 * @export
 */
export const SearchApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         *
         * @param {SearchParamsDto} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchControllerSearchChats(
            body: SearchParamsDto,
            options?: AxiosRequestConfig,
        ): Promise<AxiosResponse<Array<ApiChatRoomEntitySearchItemResponse>>> {
            return SearchApiFp(configuration)
                .searchControllerSearchChats(body, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {SearchMessagesParamsDto} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchControllerSearchMessages(
            body: SearchMessagesParamsDto,
            options?: AxiosRequestConfig,
        ): Promise<AxiosResponse<Array<ApiChatMessageEntitySearchItemResponse>>> {
            return SearchApiFp(configuration)
                .searchControllerSearchMessages(body, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {SearchParamsDto} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchControllerSearchUsers(
            body: SearchParamsDto,
            options?: AxiosRequestConfig,
        ): Promise<AxiosResponse<Array<ApiUserEntitySearchItemResponse>>> {
            return SearchApiFp(configuration)
                .searchControllerSearchUsers(body, options)
                .then((request) => request(axios, basePath));
        },
    };
};

/**
 * SearchApi - object-oriented interface
 * @export
 * @class SearchApi
 * @extends {BaseAPI}
 */
export class SearchApi extends BaseAPI {
    /**
     *
     * @param {SearchParamsDto} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    public async searchControllerSearchChats(
        body: SearchParamsDto,
        options?: AxiosRequestConfig,
    ): Promise<AxiosResponse<Array<ApiChatRoomEntitySearchItemResponse>>> {
        return SearchApiFp(this.configuration)
            .searchControllerSearchChats(body, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {SearchMessagesParamsDto} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    public async searchControllerSearchMessages(
        body: SearchMessagesParamsDto,
        options?: AxiosRequestConfig,
    ): Promise<AxiosResponse<Array<ApiChatMessageEntitySearchItemResponse>>> {
        return SearchApiFp(this.configuration)
            .searchControllerSearchMessages(body, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {SearchParamsDto} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    public async searchControllerSearchUsers(
        body: SearchParamsDto,
        options?: AxiosRequestConfig,
    ): Promise<AxiosResponse<Array<ApiUserEntitySearchItemResponse>>> {
        return SearchApiFp(this.configuration)
            .searchControllerSearchUsers(body, options)
            .then((request) => request(this.axios, this.basePath));
    }
}
